#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["c#","cs"],"languageName":"C#","name":"csharp"},{"aliases":["f#","fs"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"}]}}

#!csharp

using System.IO;

DateOnly date = DateOnly.FromDateTime(DateTime.Now);
Console.WriteLine(date.DayNumber);

Console.WriteLine("DirectorySeparatorChar: " + Path.DirectorySeparatorChar);
Console.WriteLine("PathSeparator: " + Path.PathSeparator);
Console.WriteLine("VolumeSeparatorChar: " + Path.VolumeSeparatorChar);

#!markdown

`6-23_738328.db` => 6-22 16:00 ~ 6-23 8:00    
`6-22_738326.db` => 6-21 16:00 ~ 6-22 8:00 

#!csharp

using System.Text.Encodings.Web;
using System.Text.Unicode;
using System.Text.Json;
using System.Text.Json.Nodes;

var jsonStr ="{\"a\":1,\"b\":{\"c\":\"中文\"}}";
JsonNode node = JsonNode.Parse(jsonStr);
var options = new JsonSerializerOptions(){
    Encoder = JavaScriptEncoder.Create(UnicodeRanges.BasicLatin, UnicodeRanges.CjkUnifiedIdeographs),
    WriteIndented = true
};

// Console.WriteLine(node["b"].ToJsonString());
Console.WriteLine(node["b"]["c"].ToJsonString(options));

#!csharp

using System.Text.RegularExpressions;

// 正则表达式测试
Regex.IsMatch(@"abc\def", @"c\\[a-zA-Z]+$")

#!csharp

var text = "abc";
Console.WriteLine(text[0]);

#!csharp

Console.WriteLine(DateTime.Now.ToString("yyyy-MM-ddThh:mm:ss.ffff zzzz"));

#!csharp

var time = DateTimeOffset.Parse("2023-02-02T03:20:16.4717 +08:00");
Console.WriteLine(time);

#!csharp

var template ="/{a}/{b}";
var value = string.Format(template, new {a = "a", b = "b"});
Console.WriteLine(value);

#!csharp

var template ="/{a}/{b}";
var value = string.Format(template, new {a = "a", b = "b"});
Console.WriteLine(value);

#!csharp

var template ="/{a}/{b}";
var value = string.Format(template, new {a = "a", b = "b"});
Console.WriteLine(value);

#!csharp

var template ="/{a}/{b}";
var value = string.Format(template, new {a = "a", b = "b"});
Console.WriteLine(value);

#!csharp

using System.Text.Json;

public class User{

    private string address;
    public User(string name, int age, string address){
        Name = name;
        Age = age;
        this.address = address;
Address = address;
        Console.WriteLine("构造函数");
        Console.WriteLine($"Name:{Name}, Age:{Age}, Address:{Address}");
    }

    public string Name {get;set;}
    public int Age {get;set;}
    public string Address {get;set;}
}

var text = JsonSerializer.Serialize(new User("张三", 18, "北京"));
Console.WriteLine(text);

var user = JsonSerializer.Deserialize<User>(text);
Console.WriteLine(user.Address);

#!csharp

using System;
using System.Diagnostics;

var processes = Process.GetProcesses();
foreach (var process in processes)
{
    Console.WriteLine($"Process name: {process.ProcessName}, Process ID: {process.Id}");
}
